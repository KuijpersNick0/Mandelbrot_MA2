<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/css/style.css"/>
    <title>Mandelbrot form</title>
  </head>
  <body>
    <h1> Votre point fait il partie du Mandelbrot ? </h1>
    <form>
      <div class="container">
        <label for="real"><strong>Partie réelle</strong></label>
        <input id="real" placeholder="Enter real number" name="real" required>
        
        <label for="imag"><strong>Partie imaginaire</strong></label>
        <input id="imag" placeholder="Enter imaginary number" name="imag"  required>

        <label for="itt"><strong>Iterations</strong></label>
        <input type="number" id="itt" placeholder="Enter iterations" name="itt" required>
      </div>

      <button type="submit" id="confirmBtn">Calculer</button>
      </div>
    </form>
    <div class="resultat">
        <h4 id="resultat"></h4>
    </div>


    <div class="slidecontainer">
      <h4 id="sliderValue"> </h4>
      <input type="range" min="1" max="10000" value="0" class="slider" id="myRange">
    </div>
    <canvas id="canvas" width="450" height="300"></canvas>
  
  </body>
</html>
<script>
    const real = document.getElementById('real');
    const imag = document.getElementById('imag');
    const itt = document.getElementById('itt');
    const confirmBtn = document.getElementById('confirmBtn');
    const myResult = document.getElementById("resultat");

    const myRequest = new Request('mandelbrot.json');

    confirmBtn.addEventListener('click', e => {
        const data = {real : parseFloat(real.value), imag : parseFloat(imag.value), itt : parseFloat(itt.value)}
        postData('/mandelbrot.json', data).then((data) => {
            putMessageOnPage(data);
        })
        e.preventDefault();
    });

    async function postData(url='', data={}) {
        const response = await fetch(url, {
            method: 'POST',
            mode: 'cors',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(data) 
        });
        return response.json();
        
    }

    function putMessageOnPage(data){
        if (data[0]==false){
            myResult.innerHTML = "Votre nombre n'appartient pas à l'ensemble Mandelbrot"
        } else {
            myResult.innerHTML = "Votre nombre appartient à l'ensemble Mandelbrot en " + data[1] + " itération"; 
        }
    }
</script>

<script>
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    var slider = document.getElementById("myRange");
    var output = document.getElementById("sliderValue");
    output.innerHTML = slider.value; // Display the default slider value

    // Update the current slider value (each time you drag the slider handle)
    slider.oninput = function() {
      output.innerHTML = "La nombre d'iteration utilisé pour affiché Mandelbrot est " + this.value;
    }
    slider.onchange = function() {
      draw(450, 300, this.value);
    }


    function Complex(re, im) {
      this.re = re;
      this.im = im;
    }

    Complex.prototype.add = function(other) {
      return new Complex(this.re + other.re, this.im + other.im);
    }

    Complex.prototype.mul = function(other) {
      return new Complex(this.re * other.re - this.im * other.im, this.re * other.im + this.im * other.re);
    }

    Complex.prototype.abs = function() {
      return Math.sqrt(this.re * this.re + this.im * this.im);
    }

    function belongs(re, im, iterations) {
      var z = new Complex(0, 0);
      var c = new Complex(re, im);
      var i = 0;
      while (z.abs() < 2 && i < iterations) {
        z = z.mul(z).add(c);
        i++;
      }
      return i;
    }

    function pixel(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x, y, 1, 1);
    }

    function draw(width, height, maxIterations) {
      var minRe = -2, maxRe = 1, minIm = -1, maxIm = 1;
      var reStep = (maxRe - minRe) / width, imStep = (maxIm - minIm) / height;
      var re = minRe;
      while (re < maxRe) {
        var im = minIm;
        while (im < maxIm) {
          var result = belongs(re, im, maxIterations);
          var x = (re - minRe) / reStep, y = (im - minIm) / imStep;
          if (result == maxIterations) {
            pixel(x, y, 'black');
          } else {
            var h = 30 + Math.round(120 * result * 1.0 / maxIterations);
            var color = 'hsl(' + h + ', 100%, 50%)';
            pixel(x, y, color);
          }
          im += imStep;
        }
        re += reStep;
      }
    }
    // slider.addEventListener
    // var iterations = [5, 10, 15, 25, 50, 75, 100, 150, 200, 500];
    // var i = 0;
    var interval = setInterval(function() {
      i++
      if (i >= iterations.length) {
        clearInterval(interval);
        draw(450, 300, this.value);
      }
    }, 1000);

</script>