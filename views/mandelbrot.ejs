<html>
  <head>
    <title>Mandelbrot Set</title>
  </head>
  <body>
    <h2>Afficher l'ensemble de mandelbrot jusqu'à réelle max et imaginaire max</h2>
    <div>
      <form id="choixComplexes">
        <div class="container">
          <label for="realMax"> <strong>Partie réelle max</strong></label>
          <input id="realMax" placeholder="Enter real number" name="realMax" required>
        
          <label for="imMax"> <strong>Partie imaginaire max</strong></label>
          <input id="imMax" placeholder="Enter imaginary number" name="imMax" required>
        </div>
        <button type="submit" id="confirmBtnDraw">Afficher</button>
      </form>
    </div>

    <canvas id="canvas" width="450" height="300"></canvas>
  
  </body>
</html>
<script> 
    const myRequest = new Request('mandelbrot.json');

    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    const maxRe = document.getElementById('realMax');
    const maxIm = document.getElementById('imMax');
    const confirmBtnDraw = document.getElementById('confirmBtnDraw');

    confirmBtnDraw.addEventListener('click', e => {
        draw(450, 300, maxRe.value, maxIm.value, 10); 
        e.preventDefault();
    });

    function Complex(re, im) {
      this.re = re;
      this.im = im;
    }
  
    Complex.prototype.add = function(other) {
      return new Complex(this.re + other.re, this.im + other.im);
    }

    Complex.prototype.mul = function(other) {
      return new Complex(this.re * other.re - this.im * other.im, this.re * other.im + this.im * other.re);
    }

    Complex.prototype.abs = function() {
      return Math.sqrt(this.re * this.re + this.im * this.im);
    }

    async function postData(url='', data={}) {
      //Crash serveur trop d'API calls, mémoire saturée?

        const response = await fetch(url, {
            method: 'POST',
            mode: 'cors',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(data) 
        });
        return response.json();
    }

    function belongs(re, im, iterations) {
      // var z = new Complex(0, 0);
      // var c = new Complex(re, im);
      // var i = 0;
      // while (z.abs() < 2 && i < iterations) {
      //   z = z.mul(z).add(c);
      //   i++;
      // }
      // return i;
      var test;
      const data = {real : re, imag : im, itt : iterations}
      postData('/mandelbrot.json', data).then((data) => {
          return data[1];
      })
    }

    function pixel(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x, y, 1, 1);
    }

    function draw(width, height, maxRe, maxIm, maxIterations) {
      var minRe = -2, maxRe = maxRe, minIm = -1, maxIm = maxIm;
      var reStep = (maxRe - minRe) / width, imStep = (maxIm - minIm) / height;
      var re = minRe;
      while (re < maxRe) {
        var im = minIm;
        while (im < maxIm) {
          var result = belongs(re, im, maxIterations);
          var x = (re - minRe) / reStep, y = (im - minIm) / imStep;
          if (result == maxIterations) {
            pixel(x, y, 'black');
          } else {
            var h = 30 + Math.round(120 * result * 1.0 / maxIterations);
            var color = 'hsl(' + h + ', 100%, 50%)';
            pixel(x, y, color);
          }
          im += imStep;
        }
        re += reStep;
      }
    } 
</script>
